package res.labosmtp.prankmail;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.util.LinkedList;
import java.util.Properties;
import res.labosmtp.config.AppConfigurator;
import res.labosmtp.smtp.*;

/**
 * @author Ciani Antony, Hernandez Thomas
 *
 * This class is the main program for our application. It first reads a configuration
 * file to setup the path for the files where the list of emails and the fake
 * messages are stored and also the number of groups to be formed from the emails
 * list for the campaign. It also sets the SMTP server address and port through which
 * the emails will be sent.
 *
 * Then it retrieves the data from the emails and messages files and forms random
 * groups depending on the wished number of groups and the number of email addresses
 * available. A group should be at least 3 persons (a sender(randomly chose) and 2
 * recipients) If the number of emails addresses is insufficient, the applications
 * stops and warns the user with an exception.
 *
 * For each group formed, a prank is generated by choosing a random message in the
 * list available. The prank generates an email which is sent with our SMTP client.
 *
 */
public class PrankMailGenerator {

    
    public static void main(String[] args) {

        try {

            // Default values for configuration in case the properties file
            // cannot be found
            int nbGroups = 1;
            String emailsListPath = "emails.txt";
            String messagesListPath = "messages.txt";
            String serverAddress = "localhost";
            int serverPort = 25;

            Properties prop = new Properties();

            // Retrieving information from properties file
            try {

                String filename = "appconfig.properties";

                BufferedReader br = new BufferedReader(new FileReader(filename));
                //load a properties file from class path, inside static method
                prop.load(br);

                //get the property value and print it out
                nbGroups = Integer.parseInt(prop.getProperty("nbgroups"));
                emailsListPath = prop.getProperty("emailspath");
                messagesListPath = prop.getProperty("messagespath");
                serverAddress = prop.getProperty("smtpserveraddress");
                serverPort = Integer.parseInt(prop.getProperty("serverport"));

            } catch (IOException ex) {
                System.out.println("appconfing.properties couldn't be loaded, using defaults values");
                //ex.printStackTrace();
            }

            // retrieving the emails list and the messages and forming groups
            AppConfigurator ac = new AppConfigurator(emailsListPath, messagesListPath, nbGroups);

            LinkedList<Message> messages = ac.getMessages();
            LinkedList<Group> groups = ac.getGroups();

            // Connecting to the SMTP server
            ClientSMTP csmtp = new ClientSMTP();
            csmtp.connect(serverAddress, serverPort);
            System.out.println("=====================================================================================================");
            
            int groupCounter = 0;
            
            // Sending emails for each group created
            for (Group g : groups) {
                groupCounter++;
                System.out.println("Group: " + groupCounter);
                System.out.println("Sender: " + g.getSenderEmail());
                System.out.println("Recipients: ");
                for (String email : g.getRecipientsEmails()) {
                    System.out.println(email);
                }
                
                System.out.println("=========================================");
                Prank prank = new Prank(g, messages);
                Mail prankMail = prank.getPrankMail();
                csmtp.sendMail(prankMail);
                System.out.println("=========================================");

            }
            
            // Disconnecting from server
            System.out.println("=====================================================================================================");
            csmtp.disconnect();

        } catch (Exception e) {
            System.out.println(e.getMessage());
        }

    }

}
